// Question number 2

import java.util.Scanner;

public class Main4
{

    public static void main(String[] args)
    {
        Professors p3 = new Professors(3);
        p3.salary=1;
        Professors p2 = new Professors(2);
        p2.salary=1;
        Professors p1 = new Professors(2);
        p3.salary=1;
        Secretary s=new Secretary(55);
        s.salary=1;
        Secretary s2=new Secretary(55);
        s2.salary=1;

        DeptEmployee[] department = new DeptEmployee[5];
        department[0]=p3;
        department[1]=p1;
        department[2]=p2;
        department[3]=s;
        department[4]=s2;
        Scanner sc=new Scanner(System.in);
        System.out.println("do you wish to see all the total employees salary in the department? :");
        if (sc.nextLine().equals("Y")) {
            double sum=0;
            for (DeptEmployee e : department) {
                 sum+=e.computeSalary();
                System.out.println(sum);
            }
            System.out.println("Total Salaries in the department is equal to :"+sum);
        }

    }
}
public class Secretary extends DeptEmployee
{
    double overtimeHours;

    public Secretary(int overtimeHours)
    {
        this.overtimeHours=overtimeHours;
    }
    public double getOvertimeHours() {
        return overtimeHours;
    }

    public void setOvertimeHours(double overtimeHours) {
        this.overtimeHours = overtimeHours;
    }

    @Override
    public double computeSalary()
    {
        return salary+overtimeHours*12;
    }
}
public class Professors extends DeptEmployee
{
    int numberOfPublications;

 Professors (int numberOfPublications)
 {
     this.numberOfPublications=numberOfPublications;
 }


}
import java.time.LocalDate;

public class DeptEmployee
{
    String name;
    LocalDate hireDate;

    double salary;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public LocalDate getHireDate() {
        return hireDate;
    }

    public void setHireDate(LocalDate hireDate) {
        this.hireDate = hireDate;
    }
    public double computeSalary ()
    {
        return salary;
    }
}

// Question number 1

public class Circle extends Shape
{
  double radius;
  Circle (double radius,String color)
  {
      super(color);
      this.radius=radius;
  }
    @Override
    double calculateArea() {
        return Math.PI * radius*radius;
    }

    @Override
    double calculatePerimeter() {
         return 2*Math.PI*radius;
    }
}
public class Rectangle extends Shape
{

    double width ;
    double height ;
    Rectangle (String color,double width ,double height)
    {
     super (color);
     this.width=width;
     this.height=height;
    }

    @Override
    double calculateArea() {
        return width*height;
    }

    @Override
    double calculatePerimeter() {
        return  2 * width + 2 * height;
    }
}

public abstract class Shape
{
    String color;
    Shape(String color)
    {
        this.color=color;
    }

    abstract double calculateArea();
    abstract double calculatePerimeter();


}
public class Square extends Rectangle
{
    double side;
    Square (double side,String color)
    {
        super(color,side,side);
        this.side=side;
    }

}
public class Main3
{
    public static void main(String[] args)
    {
        printTotal(new Shape[]{new Circle(2, "Red"),
                new Rectangle("Green", 3, 4), new Square(2, "Blue")});

    }
    public static void printTotal(Shape[] shapes)
    {
        Shape[] s=shapes;

        for (Shape c:s)
        {
            System.out.println("Calculated Perimeter for :"+c.getClass().getSimpleName()+" "+
                    c.calculatePerimeter() +" Color  is :"+c.color);
        }
    }
}

// question number 3

public abstract class Driver
{
    public abstract void getFigure();
    public static void main(String[] args)
    {

        Driver[] drivers=new Driver[]{new DownwardHat(),new DownwardHat(),new UpwardHat(),new FaceMaker(),new Vertical()};

        for (Driver d:drivers)
        {

             System.out.print (d.getClass().getSimpleName()+": ");
            d.getFigure();
        }
    }

}

public interface Figure
{
    abstract void getFigure();
}
public class UpwardHat extends Driver implements Figure{
    @Override
    public void getFigure()
    {
        System.out.println("\\/");
    }


}
public class FaceMaker extends Driver implements Figure
{
    @Override
    public void getFigure() {
        System.out.println(":)");
    }
}
public class Vertical extends Driver implements Figure
{
    @Override
    public void getFigure()
    {
        System.out.println("||");
    }
}
public class DownwardHat extends Driver implements Figure
{

    @Override
    public void getFigure() {
        System.out.println("/"+"\\");
    }
}


// Question number 4

public class Main5 {

    public static void main(String[] args)
    {
      Employeee[] employeee=new Employeee[]
              {
                new ComissionEmployee("Osama","Qutt","12334123",100,22.2),
                      new BasePlusCommisionEmployee("Mike","Jones","234234",33.3,20)  ,
                      new HourlyEmployee("Kate","Austin","34234",50000,80),
                      new SalariedEmployee( "Rachel","Green","4334344",1000)

              };

           double totalEmployeesSalaries=0.0;

           for (Employeee e:employeee)
           {
               totalEmployeesSalaries+=e.getPayment();
               System.out.println("emplyee type: "+e.getClass().getSimpleName()+" His/Her Salary is : "+ e.getPayment());
           }

           System.out.println("Employees total Salaries is : " +totalEmployeesSalaries);
    }
}
import java.time.LocalDate;

public abstract class Employeee
{
    private String firsName;
    private String lastName;

    public Employeee(String firsName, String lastName, String socialSecurtiyNumber) {
        this.firsName = firsName;
        this.lastName = lastName;
        this.socialSecurtiyNumber = socialSecurtiyNumber;
    }

    @Override
    public String toString() {
        return "Employeee{" +
                "firsName='" + firsName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", socialSecurtiyNumber='" + socialSecurtiyNumber + '\'' +
                '}';
    }

    public abstract double getPayment() ;
    private String socialSecurtiyNumber;

    public String getFirsName() {
        return firsName;
    }

    public void setFirsName(String firsName) {
        this.firsName = firsName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getSocialSecurtiyNumber() {
        return socialSecurtiyNumber;
    }

    public void setSocialSecurtiyNumber(String socialSecurtiyNumber) {
        this.socialSecurtiyNumber = socialSecurtiyNumber;
    }
}
import java.util.Objects;

public class ComissionEmployee extends   Employeee{

    public double getGrossSale() {
        return grossSale;
    }

    public double getComissionRate() {
        return comissionRate;
    }

    private double grossSale;
    private double comissionRate;

    public ComissionEmployee(String firsName, String lastName, String socialSecurtiyNumber, double grossSale, double comissionRate) {
        super(firsName, lastName, socialSecurtiyNumber);
        this.grossSale = grossSale;
        this.comissionRate = comissionRate;
    }


    @Override
    public String toString() {
        return "ComissionEmployee{" +
                "grossSale=" + grossSale +
                ", comissionRate=" + comissionRate +
                '}';
    }

    @Override
    public double getPayment() {
        return grossSale * comissionRate ;
    }
}
public class BasePlusCommisionEmployee extends ComissionEmployee
{
    double baseSalary;

    @Override
    public String toString() {
        return "BasePlusCommisionEmployee{" +
                "baseSalary=" + baseSalary +
                '}';
    }

    public BasePlusCommisionEmployee(String firsName, String lastName, String socialSecurtiyNumber, double grossSale, double comissionRate) {
        super(firsName, lastName, socialSecurtiyNumber, grossSale, comissionRate);
    }

    @Override
    public double getPayment()
    {
       return baseSalary + (getGrossSale()*getComissionRate());
    }
}
public class HourlyEmployee extends Employeee{

    private double wage;
    private double hours;

    HourlyEmployee(String firsName,String lastName,String socialSecurtiyNumber,double wage,double hours)
    {
        super (firsName,lastName,socialSecurtiyNumber);
        this.wage=wage;
        this.hours=hours;
    }


    @Override
    public String toString()
    {
        return "HourlyEmployee { wage = "+ wage+" , hours="+hours+" }";
    }

    @Override
    public double  getPayment()
    {
        return   wage * hours;

    }
}
public class SalariedEmployee  extends  Employeee{

    private double weeklySalary;

    public SalariedEmployee(String firsName, String lastName, String socialSecurtiyNumber, double weeklySalary) {
        super(firsName, lastName, socialSecurtiyNumber);
        this.weeklySalary = weeklySalary;
    }

    //    SalariedEmployee (double weeklySalary)
//    {
//        super();
//        this.weeklySalary=weeklySalary;
//    }
    @Override
    public double getPayment() {
        return  weeklySalary;
    }
}

// question 5

import java.util.Objects;

public class Computer {

    String manufacturer;
    String processor;
    int ramSize;
    double processorSpeed;

    @Override
    public String toString()
    {
        return "Computer {manufacturer ="+ manufacturer+ " processor="+processor+" ramSize=" +ramSize
                + " processorSpeed="+ processorSpeed +" }";
    }

    public Computer(String manufacturer, String processor, int ramSize, double processorSpeed) {
        this.manufacturer = manufacturer;
        this.processor = processor;
        this.ramSize = ramSize;
        this.processorSpeed = processorSpeed;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Computer computer = (Computer) o;
        return ramSize == computer.ramSize && Double.compare(processorSpeed, computer.processorSpeed) == 0 && Objects.equals(manufacturer, computer.manufacturer) && Objects.equals(processor, computer.processor);
    }

    @Override
    public int hashCode() {
        return Objects.hash(manufacturer, processor, ramSize, processorSpeed);
    }

    public static void main(String[] args) {

        Computer c1=new Computer("IBM","Intel",16,5.2);
        Computer c2=new Computer("Sony","AMD",32,3.2);


        System.out.println("Are computer1 and computer2 equal? " + c1.equals(c2));

        System.out.println("HashCode of computer1: " + c1.hashCode());
        System.out.println("HashCode of computer2: " + c2.hashCode());

        System.out.println("Are the hashCodes equal? " + (c1.hashCode() == c2.hashCode()));

    }
}


